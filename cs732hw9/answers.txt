Question 1

(a)
People from Ontario tend to put larger purchases on credit card.

(b)
Query:
SELECT mtype, AVG(amount) 
FROM purchases JOIN customers ON purchases.custid=customers.custid 
    JOIN paymentmethods ON purchases.custid=paymentmethods.custid AND purchases.pmid=paymentmethods.pmid 
    WHERE customers.province = 'ON' 
    GROUP BY mtype;

Results:
credit  131.40
debit   101.06


Question 2
(a)
Visitors from outside BC spent the most per transaction.

(b)
SQL Statement:

CREATE OR REPLACE VIEW vancouver_custs AS
WITH 
    vprefixes (vp) AS 
        (SELECT DISTINCT pcprefix FROM greater_vancouver_prefixes)
SELECT custid,
    CASE
        WHEN vp IS NULL THEN 0
        ELSE 1
    END AS in_vancouver
    FROM customers
    LEFT JOIN vprefixes ON SUBSTRING(customers.postalcode,1,3)=vprefixes.vp;

(c)
Query:

SELECT 
    CASE WHEN customers.province='BC' AND in_vancouver=0 THEN true 
    ELSE false 
    END AS From_BC_non_Van, 
    CASE WHEN in_vancouver=1 THEN true 
    ELSE false 
    END AS From_Van, 
    COUNT(amount) AS COUNT, AVG(amount) AS MEAN, MEDIAN(amount) AS MEDIAN 
    FROM purchases JOIN vancouver_custs ON purchases.custid=vancouver_custs.custid 
    JOIN customers ON customers.custid=purchases.custid 
    GROUP BY From_BC_non_Van, From_Van 
    ORDER BY MEDIAN ASC;

Results:
from_bc_non_van from_van count   mean    median
false           true     10384   86.01   27.370
true            false    3899    95.16   30.080
false           false    15717   112.89  33.270


Question 3
(a)
Tourists spend more at restaurants that serve sushi.

(b)
Query:

WITH 
    sushi (amenid) AS 
        (SELECT amenid FROM amenities WHERE amenity = 'restaurant' and tags.cuisine ilike '%sushi%') 
SELECT AVG(amount) AS avg, in_vancouver
FROM sushi, purchases JOIN vancouver_custs ON purchases.custid=vancouver_custs.custid 
WHERE purchases.amenid IN (sushi.amenid) 
GROUP BY in_vancouver 
ORDER BY in_vancouver;

Results:
avg    in_vancouver  
85.80  0
77.57  1               


Question 4

(a)
96.59, 106.56, 95.87, 115.50, 95.67

(b)
Query:

SELECT pdate, AVG(amount) AS avg FROM purchases 
WHERE DATE_PART(day,DATE(pdate))<=5 AND DATE_PART(month,DATE(pdate))=8 
GROUP BY pdate ORDER BY pdate ASC;

Results:

pdate       avg
2021-08-01  96.59
2021-08-02  106.56
2021-08-03  95.87
2021-08-04  115.50
2021-08-05  95.67

(c)
There are 94.06KB for 4703 rows. (94.06 * 1024 = 96317.44 bytes)
The radio is 94.06 * 1024 / 4703 = 20.48

(d)
There are 267396 bytes for 4703 rows.
The radio is 267396 / 4703 = 56.86

(e)
Since 20.48 is much smaller than 57 and 56.86 is very similar to 57, 
we infer that Redshift only scan the columns that we use in query but Spectrum scans every column in table.
Both Redshift and Spectrum scanned all rows from 2021-08-01 to 2021-08-05 since 968*5 =4840 is similar to 4703.

(f)
When we have a reasonable size dataset and we only need to scan a small part subset of the columns, loading from S3 into Redshift can make us scan less bytes for a row and then let us increase the query execution time.

(g)
When we have a large dataset and we need to scan all of or most of its columns in table, using Spectrum can let us use parallelism to gain advantage.